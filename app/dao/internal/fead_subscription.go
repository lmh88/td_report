// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// FeadSubscriptionDao is the manager for logic model data accessing and custom defined data operations functions management.
type FeadSubscriptionDao struct {
	Table   string          // Table is the underlying table name of the DAO.
	Group   string          // Group is the database configuration group name of current DAO.
	Columns FeadSubscriptionColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// FeadSubscriptionColumns defines and stores column names for table fead_subscription.
type FeadSubscriptionColumns struct {
	Id                     string //                                                        
    ProfileId              string // Profile ID                                             
    DatasetId              string // 订阅的数据类型：sp-traffic,sp-conversion,budget-usage  
    MessageSubscriptionId  string // 消息订阅id                                             
    CreateDate             string // 创建时间                                               
    Status                 string // 整体是否：1有效 0 无效                                 
    ErrReason              string // 如果错误，记录失败原因                                 
    SqsName                string // SQS名称                                                
    SqsArn                 string // SQS的识别符                                            
    SqsStatus              string // SQS状态                                                
    IsDel                  string // 删除标记，1为删除
}

//  feadSubscriptionColumns holds the columns for table fead_subscription.
var feadSubscriptionColumns = FeadSubscriptionColumns{
	Id:                    "id",                       
            ProfileId:             "profile_id",               
            DatasetId:             "dataset_id",               
            MessageSubscriptionId: "message_subscription_id",  
            CreateDate:            "create_date",              
            Status:                "status",                   
            ErrReason:             "err_reason",               
            SqsName:               "sqs_name",                 
            SqsArn:                "sqs_arn",                  
            SqsStatus:             "sqs_status",               
            IsDel:                 "is_del",
}

// NewFeadSubscriptionDao creates and returns a new DAO object for table data access.
func NewFeadSubscriptionDao() *FeadSubscriptionDao {
	return &FeadSubscriptionDao{
		Group:   "report",
		Table:   "fead_subscription",
		Columns: feadSubscriptionColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *FeadSubscriptionDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *FeadSubscriptionDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *FeadSubscriptionDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}